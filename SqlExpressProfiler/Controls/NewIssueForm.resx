<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAEAAAAB
        AAAAAAAAY0k1AGRKNgBmTDcAZ046AGhNOgBqTzwAaVA8AGxSPgArTWwAOFp3AG5VQABxVkIAc1lFAHVb
        SAB4XkoAyGIvAM1lMQDicjkA43Y+AON2QADke0YA431KAOSBTgDlhlYA5YdYAOaOYgDnlW0A85VlAPWZ
        agDom3YA6Z96APWdcQDpoX8A9qJ3APinfQA7bY0AFn2uAEZogwBMcYoAUHGKAE1/mgAQhbsAFIa6ADmH
        qQBPgp0ASYSiAFKFoABUiKMAV4umAFmPqQBck6wAXpauAGGZsgBkm7QAZp+3AGihuQBqpLwAbKe9AG2o
        vwAQjcMAApfWAAOd2wAbm9IAA6DfAByh1gAkptgAAKPkAAGn6AAMreoADa7sACW57QAoue0AMrLgADi5
        5gA1v+8AXK3KAG+qwQBwrMIAebbOAHy4zwB6t9AAerjQAHy50AB1x9wAQ8LsAEXF7wBIxu4AUsvzAGXS
        8QBt1fMAt6KTALmllgC9qJoAv6udAL+snQDDrp4A6aWFAOqqiwD5q4QA+rCLAPu1kAD8uZYA/b2aAMKu
        oADFsqUAyLKjAMy2pwDItagAy7msAM68sAD+wJ8A0cC0ANTDuADVxLkA18a8ANnJvwD/wqIAgbfKAITW
        6QCB2e0Ahd/yAKbW4ACd5O4AheD0AJbm+QCb6fkAseTrALXo7wCj7PUApO32ALrt8wC49fwA2cvCANvM
        wQDczMEA3c7FAODTygDi1s4A5NjQAOXb1ADm3NUA6N7XAOrh2wDr490AwfT6AMP5/QDF+f0A7eXgAPDq
        5gDy7ekA9O/tAPXx7wD28/AA9/TyAPj18wD5+PYA+/n4APz7+gD+/v4AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAH/+AAB//gAAf//////////
</value>
  </data>
</root>